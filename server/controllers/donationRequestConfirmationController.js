// server/controllers/donationRequestConfirmationController.js
const DonationRequestConfirmation = require('../models/DonationRequestConfirmation');
const DonationRequest = require('../models/DonationRequest');
const { notifyUser } = require('../utils/notify');

exports.createConfirmation = async (req, res) => {
  try {
    const donorId = req.user?._id || req.user?.id;
    if (!donorId) return res.status(401).json({ message: 'ÿ∫Ÿäÿ± ŸÖÿµÿ±ÿ≠' });

    const { requestId } = req.body;
    if (!requestId) return res.status(400).json({ message: 'requestId ŸÖÿ∑ŸÑŸàÿ®' });

    // üëá ŸÖŸÜÿπ ‚Äúÿ™ÿ®ÿ±Ÿëÿπ ÿ´ÿßŸÜŸç‚Äù ŸÑŸÜŸÅÿ≥ ÿßŸÑÿ∑ŸÑÿ® ŸÖŸÜ ŸÜŸÅÿ≥ ÿßŸÑŸÖÿ™ÿ®ÿ±ÿπ (ÿ•ŸÑÿß ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ŸÖÿ±ŸÅŸàÿ∂ÿ©)
    const already = await DonationRequestConfirmation.findOne({
      requestId,
      donor: donorId,
      status: { $ne: 'rejected' },
    }).lean();
    if (already) {
      return res.status(409).json({ message: 'ŸÑÿØŸäŸÉ ÿ™ÿ£ŸÉŸäÿØ ÿ≥ÿßÿ®ŸÇ ŸÑŸáÿ∞ÿß ÿßŸÑÿ∑ŸÑÿ®.' });
    }

    // ŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖŸÑŸÅÿßÿ™ (multer)
    const files = [];
    if (req.files?.files) {
      for (const f of req.files.files) files.push(`/uploads/donationRequestConfirmations/${f.filename}`);
    } else if (Array.isArray(req.files)) {
      for (const f of req.files) files.push(`/uploads/donationRequestConfirmations/${f.filename}`);
    } else if (req.file) {
      files.push(`/uploads/donationRequestConfirmations/${req.file.filename}`);
    }

    const doc = await DonationRequestConfirmation.create({
      donor: donorId,
      requestId,
      message: (req.body.message || '').trim(),
      amount: req.body.amount ? Number(req.body.amount) : undefined,
      method: req.body.method || 'call',
      proposedTime: req.body.proposedTime ? new Date(req.body.proposedTime) : new Date(),
      evidence: files,                       // ÿ≠ŸÅÿ∏ ŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑÿ•ÿ´ÿ®ÿßÿ™
      status: 'pending_verification',        // ÿ≠ÿ≥ÿ® ŸÖŸÜÿ∑ŸÇŸÉ
      reminderDueAt: new Date(Date.now() + 48 * 3600 * 1000), // ŸÑŸÑÿ™ÿ∞ŸÉŸäÿ± ÿ®ÿπÿØ 48 ÿ≥ÿßÿπÿ©
      overdue: false,
    });

    // ÿ•ÿ¥ÿπÿßÿ± ÿµÿßÿ≠ÿ® ÿßŸÑÿ∑ŸÑÿ® (ŸÉŸÖÿß ŸÉÿßŸÜ ŸÑÿØŸäŸÉ)
    const request = await DonationRequest.findById(requestId).select('userId category type');
    if (request?.userId) {
      await notifyUser({
        app: req.app,
        userId: request.userId,
        sender: donorId,
        title: 'ÿ™ÿ£ŸÉŸäÿØ ÿ™ÿ®ÿ±ÿπ ÿ¨ÿØŸäÿØ',
        message: (req.body.message && req.body.message.trim())
          ? req.body.message.trim()
          : `ÿ™ŸÑŸÇŸëŸäÿ™ ÿ™ÿ£ŸÉŸäÿØ ÿ™ÿ®ÿ±ÿπ ŸÑÿ∑ŸÑÿ®ŸÉ ${request?.category || ''}${request?.type ? ` (${request.type})` : ''}`,
        type: 'donation_request_confirmation',
        referenceId: doc._id,
      });
    }

    // ‚úÖ ÿ•ÿ¥ÿπÿßÿ± ÿßŸÑŸÖÿ™ÿ®ÿ±Ÿëÿπ ŸÜŸÅÿ≥Ÿá ÿ®ÿπÿØ ÿßŸÑÿ•ÿ±ÿ≥ÿßŸÑ (ÿßŸÑŸÖÿ∑ŸÑŸàÿ®)
    await notifyUser({
      app: req.app,
      userId: donorId,
      sender: donorId,
      title: 'ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ™ÿ£ŸÉŸäÿØŸÉ',
      message: 'ŸÑŸÇÿØ ÿ™ŸÖ ÿ•ÿ¥ÿπÿßÿ± ÿµÿßÿ≠ÿ® ÿßŸÑÿ∑ŸÑÿ® ÿ®ÿ™ÿ®ÿ±ÿπŸÉŸÖ ŸàŸäŸÖŸÉŸÜŸÉŸÖ ÿßŸÑÿ¢ŸÜ ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿπÿ®ÿ± ÿßŸÑŸàÿ≥ÿßÿ¶ŸÑ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©.',
      type: 'info',
      referenceId: doc._id,
    });

    return res.status(201).json({ message: 'ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ÿ£ŸÉŸäÿØ', data: doc });
  } catch (e) {
    console.error('createConfirmation error:', e);
    return res.status(500).json({ message: 'ŸÅÿ¥ŸÑ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ™ÿ£ŸÉŸäÿØ' });
  }
};

exports.listByRequest = async (req, res) => {
  try {
    const { id } = req.params;
    const list = await DonationRequestConfirmation.find({ requestId: id })
      .populate('donor', 'firstName lastName profileImage')
      .sort({ createdAt: -1 });
    return res.json({ data: list });
  } catch (e) {
    console.error('listByRequest error:', e);
    return res.status(500).json({ message: 'ŸÅÿ¥ŸÑ ÿßŸÑÿ¨ŸÑÿ®' });
  }
};
